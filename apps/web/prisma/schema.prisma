generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model CommunityModelOwner {
  uid             String           @id @default(cuid())
  name            String
  email           String
  participantId   String?          @unique
  clerkUserId     String?          @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  apiKeys         ApiKey[]
  communityModels CommunityModel[]
  participant     Participant?     @relation(fields: [participantId], references: [uid])
}

model CommunityModel {
  uid                     String                  @id @default(cuid())
  name                    String
  ownerId                 String
  owner                   CommunityModelOwner     @relation(fields: [ownerId], references: [uid])

  goal                    String?
  bio                     String?
  logoUrl                 String?

  // Reference to the active constitution for this community model
  activeConstitutionId    String?                 @unique
  activeConstitution      Constitution?           @relation("ActiveConstitution", fields: [activeConstitutionId], references: [uid])

  // All constitutions associated with this community model
  constitutions           Constitution[]          @relation("Constitutions")
  // Polls created within this community model
  polls                   Poll[]

  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt

  deleted                  Boolean                 @default(false)
  published               Boolean                 @default(false)
  apiEnabled    Boolean    @default(false)  // Feature flag for API access
  apiKeys       ApiKey[]   // Relation to API keys
  autoCreateConstitution Boolean        @default(false)
  @@index([ownerId])
}

model Constitution {
  uid        String             @id @default(cuid())
  version    Int
  status     ConstitutionStatus @default(DRAFT)
  content    String
  modelId    String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  deleted    Boolean            @default(false)
  isActiveIn CommunityModel?    @relation("ActiveConstitution")
  model      CommunityModel     @relation("Constitutions", fields: [modelId], references: [uid], onDelete: Cascade)

  @@index([modelId])
}

model Poll {
  uid                          String         @id @default(cuid())
  communityModelId             String
  title                        String
  description                  String?
  published                    Boolean
  requireAuth                  Boolean        @default(true)
  allowParticipantStatements   Boolean        @default(true)
  createdAt                    DateTime       @default(now())
  updatedAt                    DateTime       @updatedAt
  deleted                      Boolean        @default(false)
  completionMessage            String?
  maxSubmissionsPerParticipant Int?
  maxVotesPerParticipant       Int?
  minRequiredSubmissions       Int?
  minVotesBeforeSubmission     Int?
  communityModel               CommunityModel @relation(fields: [communityModelId], references: [uid], onDelete: Cascade)
  statements                   Statement[]

  @@index([communityModelId])
}

model Participant {
  uid                 String               @id @default(cuid())
  anonymousId         String?              @unique
  clerkUserId         String?              @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  communityModelOwner CommunityModelOwner?
  flags               Flag[]
  statements          Statement[]
  votes               Vote[]
}

model Statement {
  uid                String          @id @default(cuid())
  participantId      String
  text               String
  pollId             String
  status             StatementStatus @default(PENDING)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  deleted            Boolean         @default(false)
  agreeCount         Int             @default(0)
  disagreeCount      Int             @default(0)
  passCount          Int             @default(0)
  gacScore           Float?
  priorityScore      Float?
  lastCalculatedAt   DateTime?
  isConstitutionable Boolean         @default(false)
  flags              Flag[]
  participant        Participant     @relation(fields: [participantId], references: [uid], onDelete: Cascade)
  poll               Poll            @relation(fields: [pollId], references: [uid], onDelete: Cascade)
  votes              Vote[]

  @@index([pollId])
  @@index([status])
}

model Vote {
  uid           String      @id @default(cuid())
  participantId String
  statementId   String
  voteValue     VoteValue
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  participant   Participant @relation(fields: [participantId], references: [uid], onDelete: Cascade)
  statement     Statement   @relation(fields: [statementId], references: [uid], onDelete: Cascade)

  @@index([participantId])
  @@index([statementId])
}

model Flag {
  uid           String      @id @default(cuid())
  participantId String
  statementId   String
  reason        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  participant   Participant @relation(fields: [participantId], references: [uid], onDelete: Cascade)
  statement     Statement   @relation(fields: [statementId], references: [uid], onDelete: Cascade)

  @@index([participantId])
  @@index([statementId])
}

model ApiKey {
  uid        String              @id @default(cuid())
  key        String              @unique
  name       String?
  ownerId    String
  modelId    String
  lastUsedAt DateTime?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  expiresAt  DateTime?
  status     ApiKeyStatus        @default(ACTIVE)
  scopes     String[]
  model      CommunityModel      @relation(fields: [modelId], references: [uid], onDelete: Cascade)
  owner      CommunityModelOwner @relation(fields: [ownerId], references: [uid], onDelete: Cascade)

  @@index([ownerId])
  @@index([modelId])
}

enum ConstitutionStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum StatementStatus {
  PENDING
  APPROVED
  FLAGGED
  DELETED
}

enum VoteValue {
  AGREE
  DISAGREE
  PASS
}

enum ApiKeyStatus {
  ACTIVE
  REVOKED
  EXPIRED
}
